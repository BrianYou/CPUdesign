$version Generated by VerilatedVcd $end
$date Tue Oct 29 17:29:37 2024
 $end
$timescale  10s $end

 $scope module top $end
  $var wire  1 A! clk_i $end
  $var wire  1 @! rst_i $end
  $scope module test_top $end
   $var wire 32 J! MemAddrWidth [31:0] $end
   $var wire 32 I! MemSize [31:0] $end
   $var wire  1 ' ce_wire $end
   $var wire  1 A! clk_i $end
   $var wire  6 1! ctrl_stall_o [5:0] $end
   $var wire 32 C! exe_mem_addr_o [31:0] $end
   $var wire 32 E! exe_mem_data_o [31:0] $end
   $var wire 32 2 exe_mem_mem_addr_o [31:0] $end
   $var wire 32 4 exe_mem_mem_data_o [31:0] $end
   $var wire  4 5 exe_mem_mem_op_o [3:0] $end
   $var wire  1 3 exe_mem_mem_we_o $end
   $var wire  4 F! exe_mem_op_o [3:0] $end
   $var wire  5 / exe_mem_reg_waddr_o [4:0] $end
   $var wire 32 1 exe_mem_reg_wdata_o [31:0] $end
   $var wire  1 0 exe_mem_reg_we_o $end
   $var wire  1 D! exe_mem_we_o $end
   $var wire  5 &! exe_reg_waddr_o [4:0] $end
   $var wire 32 (! exe_reg_wdata_o [31:0] $end
   $var wire  1 '! exe_reg_we_o $end
   $var wire  1 : id_exe_inst_is_load_o $end
   $var wire 32 . id_exe_inst_o [31:0] $end
   $var wire 32 * id_exe_op1_o [31:0] $end
   $var wire 32 + id_exe_op2_o [31:0] $end
   $var wire  5 ; id_exe_rd_o [4:0] $end
   $var wire  5 - id_exe_reg_waddr_o [4:0] $end
   $var wire  1 , id_exe_reg_we_o $end
   $var wire 32 y id_inst_o [31:0] $end
   $var wire 32 z id_op1_o [31:0] $end
   $var wire 32 { id_op2_o [31:0] $end
   $var wire  5 ~ id_reg1_addr_o [4:0] $end
   $var wire  1 "! id_reg1_re_o $end
   $var wire  5 !! id_reg2_addr_o [4:0] $end
   $var wire  1 #! id_reg2_re_o $end
   $var wire  5 } id_reg_waddr_o [4:0] $end
   $var wire  1 | id_reg_we_o $end
   $var wire  1 9 id_stallreq_o $end
   $var wire 32 ( if_id_inst_addr_o [31:0] $end
   $var wire 32 ) if_id_inst_o [31:0] $end
   $var wire 32 & if_inst_addr_o [31:0] $end
   $var wire 32 B! if_inst_o [31:0] $end
   $var wire 32 ,! mem_mem_addr_o [31:0] $end
   $var wire 32 .! mem_mem_data_o [31:0] $end
   $var wire  1 -! mem_mem_we_o $end
   $var wire  1 /! mem_ram_ce_o $end
   $var wire  5 )! mem_reg_waddr_o [4:0] $end
   $var wire 32 +! mem_reg_wdata_o [31:0] $end
   $var wire  1 *! mem_reg_we_o $end
   $var wire  5 6 mem_wb_reg_waddr_o [4:0] $end
   $var wire 32 8 mem_wb_reg_wdata_o [31:0] $end
   $var wire  1 7 mem_wb_reg_we_o $end
   $var wire 32 & pc_wire [31:0] $end
   $var wire 32 0! ram_data_o [31:0] $end
   $var wire 32 $! reg1_data_o [31:0] $end
   $var wire 32 %! reg2_data_o [31:0] $end
   $var wire  1 @! rst_i $end
   $scope module ctrl0 $end
    $var wire  1 K! clk_i $end
    $var wire  1 @! rst_i $end
    $var wire  6 1! stall_o [5:0] $end
    $var wire  1 9 stallreq_from_id_i $end
   $upscope $end
   $scope module data_ram0 $end
    $var wire 32 T! RAM_ADDR_WIDTH [31:0] $end
    $var wire 32 S! RAM_SIZE [31:0] $end
    $var wire 21 ?! addr4 [20:0] $end
    $var wire 32 ,! addr_i [31:0] $end
    $var wire  1 /! ce_i $end
    $var wire  1 A! clk_i $end
    $var wire 32 .! data_i [31:0] $end
    $var wire 32 0! data_o [31:0] $end
    $var wire  1 ' inst_ce_i $end
    $var wire 32 B! inst_o [31:0] $end
    $var wire 32 & pc_i [31:0] $end
    $var wire 21 x rom_addr4 [20:0] $end
    $var wire  1 -! we_i $end
   $upscope $end
   $scope module exe0 $end
    $var wire  3 M funct3 [2:0] $end
    $var wire  7 N funct7 [6:0] $end
    $var wire 32 7! i_reg_wdata_o [31:0] $end
    $var wire  1 6! i_reg_we_o $end
    $var wire 32 . inst_i [31:0] $end
    $var wire 32 C! mem_addr_o [31:0] $end
    $var wire 32 E! mem_data_o [31:0] $end
    $var wire  4 F! mem_op_o [3:0] $end
    $var wire  1 D! mem_we_o $end
    $var wire 32 * op1_i [31:0] $end
    $var wire 32 + op2_i [31:0] $end
    $var wire  7 L opcode [6:0] $end
    $var wire 32 9! r_reg_wdata_o [31:0] $end
    $var wire  1 8! r_reg_we_o $end
    $var wire  5 - reg_waddr_i [4:0] $end
    $var wire  5 &! reg_waddr_o [4:0] $end
    $var wire 32 (! reg_wdata_o [31:0] $end
    $var wire  1 , reg_we_i $end
    $var wire  1 '! reg_we_o $end
    $var wire  1 @! rst_i $end
    $var wire 32 <! s_mem_addr_o [31:0] $end
    $var wire 32 ;! s_mem_data_o [31:0] $end
    $var wire  4 >! s_mem_op_o [3:0] $end
    $var wire  1 =! s_mem_we_o $end
    $var wire 32 R! s_reg_wdata_o [31:0] $end
    $var wire  1 :! s_reg_we_o $end
    $var wire  1 Q! stallreq_o $end
    $scope module exe_type_i0 $end
     $var wire  3 M funct3 [2:0] $end
     $var wire  7 N funct7 [6:0] $end
     $var wire 32 . inst_i [31:0] $end
     $var wire  1 O isType_i $end
     $var wire 32 * op1_i [31:0] $end
     $var wire 32 + op2_i [31:0] $end
     $var wire  7 L opcode [6:0] $end
     $var wire 32 7! reg_wdata_o [31:0] $end
     $var wire  1 6! reg_we_o $end
     $var wire  1 @! rst_i $end
    $upscope $end
    $scope module exe_type_r0 $end
     $var wire  3 M funct3 [2:0] $end
     $var wire  7 N funct7 [6:0] $end
     $var wire 32 . inst_i [31:0] $end
     $var wire  1 T isType_r $end
     $var wire  1 P op1_ge_op2_signed $end
     $var wire  1 Q op1_ge_op2_unsigned $end
     $var wire 32 * op1_i [31:0] $end
     $var wire 32 + op2_i [31:0] $end
     $var wire  7 L opcode [6:0] $end
     $var wire 32 9! reg_wdata_o [31:0] $end
     $var wire  1 8! reg_we_o $end
     $var wire  1 @! rst_i $end
     $var wire 32 R sr_shift [31:0] $end
     $var wire 32 S sr_shift_mask [31:0] $end
    $upscope $end
    $scope module exe_type_s_l0 $end
     $var wire  3 M funct3 [2:0] $end
     $var wire 32 . inst_i [31:0] $end
     $var wire 32 U load_addr_offset [31:0] $end
     $var wire 32 <! mem_addr_o [31:0] $end
     $var wire 32 ;! mem_data_o [31:0] $end
     $var wire  4 >! mem_op_o [3:0] $end
     $var wire  1 =! mem_we_o $end
     $var wire 32 * op1_i [31:0] $end
     $var wire 32 + op2_i [31:0] $end
     $var wire  7 L opcode [6:0] $end
     $var wire 32 R! reg_wdata_o [31:0] $end
     $var wire  1 :! reg_we_o $end
     $var wire  1 @! rst_i $end
     $var wire 32 V store_addr_offset [31:0] $end
    $upscope $end
   $upscope $end
   $scope module exe_mem0 $end
    $var wire  1 A! clk_i $end
    $var wire 32 C! mem_addr_i [31:0] $end
    $var wire 32 2 mem_addr_o [31:0] $end
    $var wire 32 E! mem_data_i [31:0] $end
    $var wire 32 4 mem_data_o [31:0] $end
    $var wire  4 F! mem_op_i [3:0] $end
    $var wire  4 5 mem_op_o [3:0] $end
    $var wire  1 D! mem_we_i $end
    $var wire  1 3 mem_we_o $end
    $var wire  5 &! reg_waddr_i [4:0] $end
    $var wire  5 / reg_waddr_o [4:0] $end
    $var wire 32 (! reg_wdata_i [31:0] $end
    $var wire 32 1 reg_wdata_o [31:0] $end
    $var wire  1 '! reg_we_i $end
    $var wire  1 0 reg_we_o $end
    $var wire  1 @! rst_i $end
   $upscope $end
   $scope module id0 $end
    $var wire  5 M! exe_rd_i [4:0] $end
    $var wire  5 &! exe_reg_waddr_i [4:0] $end
    $var wire 32 (! exe_reg_wdata_i [31:0] $end
    $var wire  1 '! exe_reg_we_i $end
    $var wire  3 > funct3 [2:0] $end
    $var wire  7 < funct7 [6:0] $end
    $var wire 32 4! i_op1_o [31:0] $end
    $var wire 32 C i_op2_o [31:0] $end
    $var wire  5 B i_reg1_raddr_o [4:0] $end
    $var wire  1 # i_reg1_re_o $end
    $var wire  5 O! i_reg2_raddr_o [4:0] $end
    $var wire  1 P! i_reg2_re_o $end
    $var wire  5 D i_reg_waddr_o [4:0] $end
    $var wire  1 $ i_reg_we_o $end
    $var wire 32 ( inst_addr_i [31:0] $end
    $var wire 32 ) inst_i [31:0] $end
    $var wire 32 y inst_o [31:0] $end
    $var wire  1 9 is_load_hazard $end
    $var wire  5 )! mem_reg_waddr_i [4:0] $end
    $var wire 32 +! mem_reg_wdata_i [31:0] $end
    $var wire  1 *! mem_reg_we_i $end
    $var wire 32 z op1_o [31:0] $end
    $var wire 32 2! op1_o_final [31:0] $end
    $var wire 32 { op2_o [31:0] $end
    $var wire 32 3! op2_o_final [31:0] $end
    $var wire  7 = opcode [6:0] $end
    $var wire  1 N! pre_inst_is_load_i $end
    $var wire 32 G! r_op1_o [31:0] $end
    $var wire 32 H! r_op2_o [31:0] $end
    $var wire  5 E r_reg1_raddr_o [4:0] $end
    $var wire  1 G r_reg1_re_o $end
    $var wire  5 F r_reg2_raddr_o [4:0] $end
    $var wire  1 H r_reg2_re_o $end
    $var wire  5 J r_reg_waddr_o [4:0] $end
    $var wire  1 I r_reg_we_o $end
    $var wire  5 ? rd [4:0] $end
    $var wire  5 ~ reg1_raddr_o [4:0] $end
    $var wire 32 $! reg1_rdata_i [31:0] $end
    $var wire  1 "! reg1_re_o $end
    $var wire  5 !! reg2_raddr_o [4:0] $end
    $var wire 32 %! reg2_rdata_i [31:0] $end
    $var wire  1 #! reg2_re_o $end
    $var wire  5 } reg_waddr_o [4:0] $end
    $var wire  1 | reg_we_o $end
    $var wire  5 @ rs1 [4:0] $end
    $var wire  5 A rs2 [4:0] $end
    $var wire  1 @! rst_i $end
    $var wire  1 9 stallreq_o $end
    $scope module inst_type_i $end
     $var wire  3 > funct3 [2:0] $end
     $var wire 32 ) inst_i [31:0] $end
     $var wire 32 4! op1_o [31:0] $end
     $var wire 32 C op2_o [31:0] $end
     $var wire  5 ? rd [4:0] $end
     $var wire  5 B reg1_raddr_o [4:0] $end
     $var wire 32 $! reg1_rdata_i [31:0] $end
     $var wire  1 # reg1_re_o $end
     $var wire  5 O! reg2_raddr_o [4:0] $end
     $var wire 32 %! reg2_rdata_i [31:0] $end
     $var wire  1 P! reg2_re_o $end
     $var wire  5 D reg_waddr_o [4:0] $end
     $var wire  1 $ reg_we_o $end
     $var wire  5 @ rs1 [4:0] $end
     $var wire  5 A rs2 [4:0] $end
    $upscope $end
    $scope module inst_type_r $end
     $var wire  3 > funct3 [2:0] $end
     $var wire  7 < funct7 [6:0] $end
     $var wire 32 ) inst_i [31:0] $end
     $var wire  1 K isType_r $end
     $var wire 32 G! op1_o [31:0] $end
     $var wire 32 H! op2_o [31:0] $end
     $var wire  7 = opcode [6:0] $end
     $var wire  5 ? rd [4:0] $end
     $var wire  5 E reg1_raddr_o [4:0] $end
     $var wire 32 $! reg1_rdata_i [31:0] $end
     $var wire  1 G reg1_re_o $end
     $var wire  5 F reg2_raddr_o [4:0] $end
     $var wire 32 %! reg2_rdata_i [31:0] $end
     $var wire  1 H reg2_re_o $end
     $var wire  5 J reg_waddr_o [4:0] $end
     $var wire  1 I reg_we_o $end
     $var wire  5 @ rs1 [4:0] $end
     $var wire  5 A rs2 [4:0] $end
     $var wire  5 A shamt [4:0] $end
    $upscope $end
   $upscope $end
   $scope module id_exe0 $end
    $var wire  1 A! clk_i $end
    $var wire 32 y inst_i [31:0] $end
    $var wire  1 : inst_is_load_o $end
    $var wire 32 . inst_o [31:0] $end
    $var wire 32 z op1_i [31:0] $end
    $var wire 32 * op1_o [31:0] $end
    $var wire 32 { op2_i [31:0] $end
    $var wire 32 + op2_o [31:0] $end
    $var wire  7 5! opcode [6:0] $end
    $var wire  5 ; rd_o [4:0] $end
    $var wire  5 } reg_waddr_i [4:0] $end
    $var wire  5 - reg_waddr_o [4:0] $end
    $var wire  1 | reg_we_i $end
    $var wire  1 , reg_we_o $end
    $var wire  1 @! rst_i $end
    $var wire  6 1! stall_i [5:0] $end
   $upscope $end
   $scope module if_id0 $end
    $var wire  1 A! clk_i $end
    $var wire 32 & inst_addr_i [31:0] $end
    $var wire 32 ( inst_addr_o [31:0] $end
    $var wire 32 B! inst_i [31:0] $end
    $var wire 32 ) inst_o [31:0] $end
    $var wire  1 @! rst_i $end
    $var wire  6 L! stall_i [5:0] $end
   $upscope $end
   $scope module mem0 $end
    $var wire 32 2 mem_addr_i [31:0] $end
    $var wire 32 4 mem_data_i [31:0] $end
    $var wire  4 5 mem_op_i [3:0] $end
    $var wire  1 3 mem_we_i $end
    $var wire 32 ,! ram_addr_o [31:0] $end
    $var wire  2 W ram_addr_offset [1:0] $end
    $var wire  1 /! ram_ce_o $end
    $var wire 32 0! ram_data_i [31:0] $end
    $var wire 32 .! ram_data_o [31:0] $end
    $var wire  1 -! ram_w_request_o $end
    $var wire  5 / reg_waddr_i [4:0] $end
    $var wire  5 )! reg_waddr_o [4:0] $end
    $var wire 32 1 reg_wdata_i [31:0] $end
    $var wire 32 +! reg_wdata_o [31:0] $end
    $var wire  1 0 reg_we_i $end
    $var wire  1 *! reg_we_o $end
    $var wire  1 @! rst_i $end
   $upscope $end
   $scope module mem_wb0 $end
    $var wire  1 A! clk_i $end
    $var wire  5 )! reg_waddr_i [4:0] $end
    $var wire  5 6 reg_waddr_o [4:0] $end
    $var wire 32 +! reg_wdata_i [31:0] $end
    $var wire 32 8 reg_wdata_o [31:0] $end
    $var wire  1 *! reg_we_i $end
    $var wire  1 7 reg_we_o $end
    $var wire  1 @! rst_i $end
   $upscope $end
   $scope module pc_reg0 $end
    $var wire  1 ' ce_o $end
    $var wire  1 A! clk_i $end
    $var wire 32 & pc_o [31:0] $end
    $var wire  1 @! rst_i $end
    $var wire  6 1! stall_i [5:0] $end
   $upscope $end
   $scope module regfile0 $end
    $var wire  1 A! clk_i $end
    $var wire 32 % i [31:0] $end
    $var wire  5 ~ raddr1_i [4:0] $end
    $var wire  5 !! raddr2_i [4:0] $end
    $var wire 32 $! rdata1_o [31:0] $end
    $var wire 32 %! rdata2_o [31:0] $end
    $var wire  1 "! re1_i $end
    $var wire  1 #! re2_i $end
    $var wire 32 X regs(0) [31:0] $end
    $var wire 32 Y regs(1) [31:0] $end
    $var wire 32 b regs(10) [31:0] $end
    $var wire 32 c regs(11) [31:0] $end
    $var wire 32 d regs(12) [31:0] $end
    $var wire 32 e regs(13) [31:0] $end
    $var wire 32 f regs(14) [31:0] $end
    $var wire 32 g regs(15) [31:0] $end
    $var wire 32 h regs(16) [31:0] $end
    $var wire 32 i regs(17) [31:0] $end
    $var wire 32 j regs(18) [31:0] $end
    $var wire 32 k regs(19) [31:0] $end
    $var wire 32 Z regs(2) [31:0] $end
    $var wire 32 l regs(20) [31:0] $end
    $var wire 32 m regs(21) [31:0] $end
    $var wire 32 n regs(22) [31:0] $end
    $var wire 32 o regs(23) [31:0] $end
    $var wire 32 p regs(24) [31:0] $end
    $var wire 32 q regs(25) [31:0] $end
    $var wire 32 r regs(26) [31:0] $end
    $var wire 32 s regs(27) [31:0] $end
    $var wire 32 t regs(28) [31:0] $end
    $var wire 32 u regs(29) [31:0] $end
    $var wire 32 [ regs(3) [31:0] $end
    $var wire 32 v regs(30) [31:0] $end
    $var wire 32 w regs(31) [31:0] $end
    $var wire 32 \ regs(4) [31:0] $end
    $var wire 32 ] regs(5) [31:0] $end
    $var wire 32 ^ regs(6) [31:0] $end
    $var wire 32 _ regs(7) [31:0] $end
    $var wire 32 ` regs(8) [31:0] $end
    $var wire 32 a regs(9) [31:0] $end
    $var wire  1 @! rst_i $end
    $var wire  5 6 waddr_i [4:0] $end
    $var wire 32 8 wdata_i [31:0] $end
    $var wire  1 7 we_i $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#5
1#
1$
b00000000000000000000000000100000 %
b00000000000000000000000000000000 &
0'
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
0,
b00000 -
b00000000000000000000000000000000 .
b00000 /
00
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
03
b00000000000000000000000000000000 4
b0000 5
b00000 6
07
b00000000000000000000000000000000 8
09
0:
b00000 ;
b0000000 <
b0000000 =
b000 >
b00000 ?
b00000 @
b00000 A
b00000 B
b00000000000000000000000000000000 C
b00000 D
b00000 E
b00000 F
0G
0H
0I
b00000 J
0K
b0000000 L
b000 M
b0000000 N
0O
1P
1Q
b00000000000000000000000000000000 R
b11111111111111111111111111111111 S
0T
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
b00 W
b00000000000000000000000000000000 X
b00000000000000000000000000000000 Y
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 [
b00000000000000000000000000000000 \
b00000000000000000000000000000000 ]
b00000000000000000000000000000000 ^
b00000000000000000000000000000000 _
b00000000000000000000000000000000 `
b00000000000000000000000000000000 a
b00000000000000000000000000000000 b
b00000000000000000000000000000000 c
b00000000000000000000000000000000 d
b00000000000000000000000000000000 e
b00000000000000000000000000000000 f
b00000000000000000000000000000000 g
b00000000000000000000000000000000 h
b00000000000000000000000000000000 i
b00000000000000000000000000000000 j
b00000000000000000000000000000000 k
b00000000000000000000000000000000 l
b00000000000000000000000000000000 m
b00000000000000000000000000000000 n
b00000000000000000000000000000000 o
b00000000000000000000000000000000 p
b00000000000000000000000000000000 q
b00000000000000000000000000000000 r
b00000000000000000000000000000000 s
b00000000000000000000000000000000 t
b00000000000000000000000000000000 u
b00000000000000000000000000000000 v
b00000000000000000000000000000000 w
b000000000000000000000 x
b00000000000000000000000000000000 y
b00000000000000000000000000000000 z
b00000000000000000000000000000000 {
0|
b00000 }
b00000 ~
b00000 !!
0"!
0#!
b00000000000000000000000000000000 $!
b00000000000000000000000000000000 %!
b00000 &!
0'!
b00000000000000000000000000000000 (!
b00000 )!
0*!
b00000000000000000000000000000000 +!
b00000000000000000000000000000000 ,!
0-!
b00000000000000000000000000000000 .!
0/!
b00000000000000000000000000000000 0!
b000000 1!
b00000000000000000000000000000000 2!
b00000000000000000000000000000000 3!
b00000000000000000000000000000000 4!
b0000000 5!
06!
b00000000000000000000000000000000 7!
08!
b00000000000000000000000000000000 9!
0:!
b00000000000000000000000000000000 ;!
b00000000000000000000000000000000 <!
0=!
b0000 >!
b000000000000000000000 ?!
1@!
0A!
b00000000000000000000000000000000 B!
b00000000000000000000000000000000 C!
0D!
b00000000000000000000000000000000 E!
b0000 F!
b00000000000000000000000000000000 G!
b00000000000000000000000000000000 H!
b00000000001000000000000000000000 I!
b00000000000000000000000000010101 J!
0K!
b000000 L!
b00000 M!
0N!
b00000 O!
0P!
0Q!
b00000000000000000000000000000000 R!
b00000000001000000000000000000000 S!
b00000000000000000000000000010101 T!
#10
10
17
1A!
#15
0A!
#20
1A!
#25
0A!
#30
1A!
#35
0A!
#40
1A!
#45
0A!
#50
1A!
#55
1*!
0@!
0A!
#60
1'
00
0*!
1A!
b11110000101100000000000110010011 B!
#65
0A!
#70
b00000000000000000000000000000100 &
b11110000101100000000000110010011 )
07
b1111000 <
b0010011 =
b00011 ?
b01011 A
b11111111111111111111111100001011 C
b00011 D
b000000000000000000100 x
b11110000101100000000000110010011 y
b11111111111111111111111100001011 {
1|
b00011 }
1"!
b11111111111111111111111100001011 3!
b0010011 5!
1A!
b11111010101100000000001000010011 B!
#75
0A!
#80
b00000000000000000000000000001000 &
b00000000000000000000000000000100 (
b11111010101100000000001000010011 )
b11111111111111111111111100001011 +
1,
b00011 -
b11110000101100000000000110010011 .
b00011 ;
b1111101 <
b00100 ?
b11111111111111111111111110101011 C
b00100 D
b0010011 L
b1111000 N
1O
0Q
b00000000000111111111111111111111 S
b11111111111111111111111100001011 U
b11111111111111111111111100000011 V
b000000000000000001000 x
b11111010101100000000001000010011 y
b11111111111111111111111110101011 {
b00100 }
b00011 &!
1'!
b11111111111111111111111100001011 (!
b11111111111111111111111110101011 3!
16!
b11111111111111111111111100001011 7!
1A!
b00000000000000000000001010010111 B!
#85
0A!
#90
b00000000000000000000000000001100 &
b00000000000000000000000000001000 (
b00000000000000000000001010010111 )
b11111111111111111111111110101011 +
b00100 -
b11111010101100000000001000010011 .
b00011 /
10
b11111111111111111111111100001011 1
b00100 ;
b0000000 <
b0010111 =
b00101 ?
b00000 A
b00000000000000000000000000000000 C
b00101 D
b1111101 N
b11111111111111111111111110101011 U
b11111111111111111111111110100100 V
b000000000000000001100 x
b00000000000000000000001010010111 y
b00000000000000000000000000001000 z
b00000000000000000000000000000000 {
b00101 }
0"!
b00100 &!
b11111111111111111111111110101011 (!
b00011 )!
1*!
b11111111111111111111111100001011 +!
b00000000000000000000000000001000 2!
b00000000000000000000000000000000 3!
b0010111 5!
b11111111111111111111111110101011 7!
1A!
b00000001000000101000001010010011 B!
#95
0A!
#100
b00000000000000000000000000010000 &
b00000000000000000000000000001100 (
b00000001000000101000001010010011 )
b00000000000000000000000000001000 *
b00000000000000000000000000000000 +
b00101 -
b00000000000000000000001010010111 .
b00100 /
b11111111111111111111111110101011 1
b00011 6
17
b11111111111111111111111100001011 8
b00101 ;
b0010011 =
b00101 @
b10000 A
b00101 B
b00000000000000000000000000010000 C
b0010111 L
b0000000 N
0O
1Q
b00000000000000000000000000001000 R
b11111111111111111111111111111111 S
b00000000000000000000000000000000 U
b00000000000000000000000000000101 V
b000000000000000010000 x
b00000001000000101000001010010011 y
b00000000000000000000000000010000 {
b00101 ~
1"!
b00101 &!
b00000000000000000000000000001000 (!
b00100 )!
b11111111111111111111111110101011 +!
b00000000000000000000000000000000 2!
b00000000000000000000000000010000 3!
b0010011 5!
06!
b00000000000000000000000000000000 7!
1A!
b00000000000000101001001100000011 B!
#105
0A!
#110
b00000000000000000000000000010100 &
b00000000000000000000000000010000 (
b00000000000000101001001100000011 )
b00000000000000000000000000010000 +
b00000001000000101000001010010011 .
b00101 /
b00000000000000000000000000001000 1
b00100 6
b11111111111111111111111110101011 8
b0000011 =
b001 >
b00110 ?
b00000 A
b00000000000000000000000000000000 C
b00110 D
b0010011 L
1O
0P
0Q
b00000000000000000000000000000000 R
b00000000000000001111111111111111 S
b00000000000000000000000000010000 U
b11111111111111111111111100001011 [
b000000000000000010100 x
b00000000000000101001001100000011 y
b00000000000000000000000000011000 z
b00000000000000000000000000000000 {
b00110 }
b00000000000000000000000000011000 (!
b00101 )!
b00000000000000000000000000001000 +!
b00000000000000000000000000000000 3!
b0000011 5!
16!
b00000000000000000000000000011000 7!
1A!
b00000000001000101001001110000011 B!
#115
0A!
#120
b00000000000000000000000000011000 &
b00000000000000000000000000010100 (
b00000000001000101001001110000011 )
b00000000000000000000000000011000 *
b00000000000000000000000000000000 +
b00110 -
b00000000000000101001001100000011 .
b00000000000000000000000000011000 1
b00101 6
b00000000000000000000000000001000 8
1:
b00110 ;
b00111 ?
b00010 A
b00000000000000000000000000000010 C
b00111 D
b0000011 L
b001 M
0O
1P
1Q
b00000000000000000000000000011000 R
b11111111111111111111111111111111 S
b00000000000000000000000000000000 U
b00000000000000000000000000000110 V
b11111111111111111111111110101011 \
b000000000000000011000 x
b00000000001000101001001110000011 y
b00111 }
b00000000000000000000000000001000 $!
b00110 &!
b00000000000000000000000000000000 (!
b00000000000000000000000000011000 +!
b00000000000000000000000000001000 2!
b00000000000000000000000000001000 4!
06!
b00000000000000000000000000000000 7!
1:!
b00000000000000000000000000011000 <!
b1010 >!
1A!
b01111000010101100011010000010010 B!
b00000000000000000000000000011000 C!
b1010 F!
#125
0A!
#130
b00000000000000000000000000011100 &
b00000000000000000000000000011000 (
b01111000010101100011010000010010 )
b00111 -
b00000000001000101001001110000011 .
b00110 /
b00000000000000000000000000000000 1
b00000000000000000000000000011000 2
b1010 5
b00000000000000000000000000011000 8
b00111 ;
b0111100 <
b0010010 =
b011 >
b01000 ?
b01100 @
b00101 A
b01100 B
b00000000000000000000011110000101 C
b01000 D
b00000000000000000000000000000010 U
b00000000000000000000000000000111 V
b00000000000000000000000000001000 ]
b000000000000000011100 x
b00000000000000000000000000000000 y
b00000000000000000000000000000000 z
0|
b00000 }
b00000 ~
0"!
b00000000000000000000000000000000 $!
b00111 &!
b00110 )!
b00000000000000000011010000010010 +!
b00000000000000000000000000011000 ,!
1/!
b01111000010101100011010000010010 0!
b00000000000000000000000000000000 2!
b00000000000000000000000000000000 4!
b0000000 5!
b00000000000000000000000000011010 <!
b000000000000000011000 ?!
1A!
b00000000000000000000000000000000 B!
b00000000000000000000000000011010 C!
#135
0A!
#140
b00000000000000000000000000100000 &
b00000000000000000000000000011100 (
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
0,
b00000 -
b00000000000000000000000000000000 .
b00111 /
b00000000000000000000000000011010 2
b00110 6
b00000000000000000011010000010010 8
0:
b00000 ;
b0000000 <
b0000000 =
b000 >
b00000 ?
b00000 @
b00000 A
b00000 B
b00000000000000000000000000000000 C
b00000 D
b0000000 L
b000 M
b00000000000000000000000000000000 R
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
b10 W
b00000000000000000000000000011000 ]
b000000000000000100000 x
b00000 &!
0'!
b00111 )!
b00000000000000000111100001010110 +!
b00000000000000000000000000011010 ,!
0:!
b00000000000000000000000000000000 <!
b0000 >!
1A!
b00000000000000000000000000000000 C!
b0000 F!
#145
0A!
#150
b00000000000000000000000000100100 &
b00000000000000000000000000100000 (
b00000 /
00
b00000000000000000000000000000000 2
b0000 5
b00111 6
b00000000000000000111100001010110 8
b00 W
b00000000000000000011010000010010 ^
b000000000000000100100 x
b00000 )!
0*!
b00000000000000000000000000000000 +!
b00000000000000000000000000000000 ,!
0/!
b00000000000000000000000000000000 0!
b000000000000000000000 ?!
1A!
#155
0A!
#160
b00000000000000000000000000101000 &
b00000000000000000000000000100100 (
b00000 6
07
b00000000000000000000000000000000 8
b00000000000000000111100001010110 _
b000000000000000101000 x
1A!
#165
0A!
#170
b00000000000000000000000000101100 &
b00000000000000000000000000101000 (
b000000000000000101100 x
1A!
#175
0A!
#180
b00000000000000000000000000110000 &
b00000000000000000000000000101100 (
b000000000000000110000 x
1A!
#185
0A!
#190
b00000000000000000000000000110100 &
b00000000000000000000000000110000 (
b000000000000000110100 x
1A!
#195
0A!
#200
b00000000000000000000000000111000 &
b00000000000000000000000000110100 (
b000000000000000111000 x
1A!
#205
0A!
#210
b00000000000000000000000000111100 &
b00000000000000000000000000111000 (
b000000000000000111100 x
1A!
#215
0A!
#220
b00000000000000000000000001000000 &
b00000000000000000000000000111100 (
b000000000000001000000 x
1A!
#225
0A!
#230
b00000000000000000000000001000100 &
b00000000000000000000000001000000 (
b000000000000001000100 x
1A!
#235
0A!
#240
b00000000000000000000000001001000 &
b00000000000000000000000001000100 (
b000000000000001001000 x
1A!
#245
0A!
#250
b00000000000000000000000001001100 &
b00000000000000000000000001001000 (
b000000000000001001100 x
1A!
